simulated_data <- simulate_circuit(params, f)
# Create a new dataframe that includes the simulated data
simulated_df <- data.frame(
complete_ID = complete_id,
f = f,
variable = rep(c("x", "y", "Zr"), each = length(f)),
simulated = c(simulated_data$x, simulated_data$y, simulated_data$Zr)
)
# Combine measured and simulated data
combined_data <- merge(measured_data, simulated_df, by=c("complete_ID","f","variable"))
# Create the plot
p <- ggplot(combined_data, aes(x = f)) +
geom_line(aes(y = fit), linewidth = 0.25) +
geom_line(aes(y = simulated, color = 'simulated'), linewidth = 0.75) + # Add line for simulated data
geom_point(aes(y = actual), shape = 22, fill = 'white', color = 'black', size = 2, alpha = 1) +
facet_grid(variable ~ complete_ID, scales = "free_y", labeller = labeller(variable = variable.labs, complete_ID = observation.labs)) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x, n = 5), labels = trans_format("log10", math_format(10^.x))) +
scale_y_continuous(labels = comma) +
labs(
y = element_blank(),
x = "Frequency (Hz)",
color = element_blank()
) +
theme_stata(scheme = "s1color",base_size =12) +
scale_color_manual(values = c(simulated = "red")) # Define color for simulated data
file_name <- paste0("Combined data ", complete_id, ".png")
ggsave(file_name, width = figure_width_large / 2, height = figure_height_large, units = "in")
}
for (complete_id in unique_complete_IDs) {
# Extract corresponding circuit parameters
params <- fr[fr$complete_ID == complete_id, ]
# Extract measured data for the complete_ID
measured_data <- er %>%
filter(complete_ID %in% complete_id) %>%
melt(
id.vars = c("complete_ID","f"),
measure.vars = c("x","y","Zr","xfit_absZr","yfit_absZr","Z3fit_absZr")
) %>%
left_join(., stack(observation_labels), by = c(variable = "values")) %>%
mutate(obs = ind,ind = NULL) %>%
mutate(variable = recode(variable, xfit_absZr = "x", yfit_absZr = "y", Z3fit_absZr = "Zr")) %>%
dcast(complete_ID+f+variable~obs, value.var = "value")
# define the frequencies to measure
f <- unique(measured_data$f)
# Simulate the circuit
simulated_data <- simulate_circuit(params, f)
# Create a new dataframe that includes the simulated data
simulated_df <- data.frame(
complete_ID = complete_id,
f = f,
variable = rep(c("x", "y", "Zr"), each = length(f)),
simulated = c(simulated_data$x, simulated_data$y, simulated_data$Zr)
)
# Combine measured and simulated data
combined_data <- merge(measured_data, simulated_df, by=c("complete_ID","f","variable"))
# Create the plot
p <- ggplot(combined_data, aes(x = f)) +
geom_line(aes(y = fit), linewidth = 0.25) +
geom_line(aes(y = simulated, color = 'simulated'), linewidth = 0.75) + # Add line for simulated data
geom_point(aes(y = actual), shape = 22, fill = 'white', color = 'black', size = 2, alpha = 1) +
facet_grid(variable ~ complete_ID, scales = "free_y", labeller = labeller(variable = variable.labs, complete_ID = observation.labs)) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x, n = 5), labels = trans_format("log10", math_format(10^.x))) +
scale_y_continuous(labels = comma) +
labs(
y = element_blank(),
x = "Frequency (Hz)",
color = element_blank()
) +
theme_stata(scheme = "s1color",base_size =12) +
scale_color_manual(values = c(simulated = "red")) # Define color for simulated data
file_name <- paste0("Combined data ", complete_id, ".png")
ggsave(file_name, width = figure_width_large / 2, height = figure_height_large, units = "in")
}
p <- ggplot(combined_data, aes(x = f)) +
geom_line(aes(y = fit), linewidth = 0.25) +
geom_line(aes(y = simulated, color = 'simulated'), linewidth = 0.75) + # Add line for simulated data
geom_point(aes(y = actual), shape = 22, fill = 'white', color = 'black', size = 2, alpha = 1) +
facet_grid(variable ~ complete_ID, scales = "free_y", labeller = labeller(variable = variable.labs, complete_ID = complete_id)) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x, n = 5), labels = trans_format("log10", math_format(10^.x))) +
scale_y_continuous(labels = comma) +
labs(
y = element_blank(),
x = "Frequency (Hz)",
color = element_blank()
) +
theme_stata(scheme = "s1color",base_size =12) +
scale_color_manual(values = c(simulated = "red")) # Define color for simulated data
p <- ggplot(combined_data, aes(x = f)) +
geom_line(aes(y = fit), linewidth = 0.25) +
geom_line(aes(y = simulated, color = 'simulated'), linewidth = 0.75) + # Add line for simulated data
geom_point(aes(y = actual), shape = 22, fill = 'white', color = 'black', size = 2, alpha = 1) +
facet_grid(variable ~ complete_ID, scales = "free_y", labeller = labeller(variable = variable.labs, complete_ID = complete_id)) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x, n = 5), labels = trans_format("log10", math_format(10^.x))) +
scale_y_continuous(labels = comma) +
labs(
y = element_blank(),
x = "Frequency (Hz)",
color = element_blank()
) +
theme_stata(scheme = "s1color",base_size =10) +
scale_color_manual(values = c(simulated = "red")) # Define color for simulated data
p
EIS_example
fit_example_data <- fr %>%
filter(complete_ID %in% EIS_example)
# actual values for circuit
fit_example_data$RsolA
fit_example_data$RsolB
fit_example_data$Ra
fit_example_data$Ca
fit_example_data$Rb
fit_example_data$Cb
fit_example_data$Rs
EIS_example <- c("20221220_200140 1")
# rename simple variable labels in the output table  to more descriptive
# captions
variable.labs <- c("Real","Imaginary", "Zr")
names(variable.labs) <- c("x", "y", "Zr")
# rename all observations, both fit and actual to have the same x y and Zr names
observation_labels <- list(actual=c("x","y","Zr"),
fit=c("xfit_absZr","yfit_absZr","Z3fit_absZr"))
# to avoid confusion in the paper, rename the EIS recording complete_ID to
# "Example N"
observation.labs <- c("Example 1", "Example 2","Example 3")
names(observation.labs) <- EIS_example
# FILTER AND PREPROCESS EXAMPLE FREQUENCY DATA
EIS_example_data <- er %>%
filter(complete_ID %in% EIS_example) %>%
melt(
id.vars = c("complete_ID","f"),
measure.vars = c("x","y","Zr","xfit_absZr","yfit_absZr","Z3fit_absZr")
) %>%
left_join(., stack(observation_labels), by = c(variable = "values")) %>%
mutate(obs = ind,ind = NULL) %>%
mutate(variable = recode(variable, xfit_absZr = "x", yfit_absZr = "y", Z3fit_absZr = "Zr")) %>%
dcast(complete_ID+f+variable~obs, value.var = "value")
fit_example_data <- fr %>%
filter(complete_ID %in% EIS_example)
# actual values for circuit
fit_example_data$RsolA
fit_example_data$RsolB
fit_example_data$Ra
fit_example_data$Ca
fit_example_data$Rb
fit_example_data$Cb
fit_example_data$Rs
# Function to simulate the circuit
simulate_circuit <- function(params, f) {
w <- 2 * pi * f
RsolA <- params$RsolA
RsolB <- params$RsolB
Za <- params$Ra / (1 + 1i * w * params$Ra * params$Ca)
Zb <- params$Rb / (1 + 1i * w * params$Rb * params$Cb)
Rs <- params$Rs
Zab <- Za + Zb
Zabs <- 1 / (1 / Zab + 1 / params$Rs)
Zabs_Rsol <- params$RsolA + params$RsolB + Zabs
Zr <- (Za * Rs + RsolA * (Rs + Za + Zb)) / (Zb * Rs + RsolB * (Rs + Za + Zb))
#Zr_a <- sqrt((params$Ca^2 * params$Ra^2 * params$RsolA^2 * w^2 + params$Ra^2 + 2 * params$Ra * params$RsolA + params$RsolA^2) / (params$Ca^2 * params$Ra^2 * w^2 + 1))
#Zr_b <- sqrt((params$Cb^2 * params$Rb^2 * params$RsolB^2 * w^2 + params$Rb^2 + 2 * params$Rb * params$RsolB + params$RsolB^2) / (params$Cb^2 * params$Rb^2 * w^2 + 1))
#Zr <- Zr_a / Zr_b
return(list(x=Re(Zabs_Rsol), y=Im(Zabs_Rsol), Zr=Zr))
}
# Iterate over each unique complete_ID
unique_complete_IDs <- unique(fr$complete_ID)
FIG_path <- file.path(DATA_path,"Validation Data")
complete_id
complete_id <- c("20221220_200140 1")
params <- fr[fr$complete_ID == complete_id, ]
# Extract measured data for the complete_ID
measured_data <- er %>%
filter(complete_ID %in% complete_id) %>%
melt(
id.vars = c("complete_ID","f"),
measure.vars = c("x","y","Zr","xfit_absZr","yfit_absZr","Z3fit_absZr")
) %>%
left_join(., stack(observation_labels), by = c(variable = "values")) %>%
mutate(obs = ind,ind = NULL) %>%
mutate(variable = recode(variable, xfit_absZr = "x", yfit_absZr = "y", Z3fit_absZr = "Zr")) %>%
dcast(complete_ID+f+variable~obs, value.var = "value")
f <- unique(measured_data$f)
simulated_data <- simulate_circuit(params, f)
View(simulated_data)
# Function to simulate the circuit
simulate_circuit <- function(params, f) {
w <- 2 * pi * f
RsolA <- params$RsolA
RsolB <- params$RsolB
Za <- params$Ra / (1 + 1i * w * params$Ra * params$Ca)
Zb <- params$Rb / (1 + 1i * w * params$Rb * params$Cb)
Rs <- params$Rs
Zab <- Za + Zb
Zabs <- 1 / (1 / Zab + 1 / params$Rs)
Zabs_Rsol <- params$RsolA + params$RsolB + Zabs
Zr <- abs(Za * Rs + RsolA * (Rs + Za + Zb)) / abs(Zb * Rs + RsolB * (Rs + Za + Zb))
#Zr_a <- sqrt((params$Ca^2 * params$Ra^2 * params$RsolA^2 * w^2 + params$Ra^2 + 2 * params$Ra * params$RsolA + params$RsolA^2) / (params$Ca^2 * params$Ra^2 * w^2 + 1))
#Zr_b <- sqrt((params$Cb^2 * params$Rb^2 * params$RsolB^2 * w^2 + params$Rb^2 + 2 * params$Rb * params$RsolB + params$RsolB^2) / (params$Cb^2 * params$Rb^2 * w^2 + 1))
#Zr <- Zr_a / Zr_b
return(list(x=Re(Zabs_Rsol), y=Im(Zabs_Rsol), Zr=Zr))
}
# Simulate the circuit
simulated_data <- simulate_circuit(params, f)
# Create a new dataframe that includes the simulated data
simulated_df <- data.frame(
complete_ID = complete_id,
f = f,
variable = rep(c("x", "y", "Zr"), each = length(f)),
simulated = c(simulated_data$x, simulated_data$y, simulated_data$Zr)
)
View(simulated_df)
# VALIDATE THE EISandPipette.R data
# this must be run after loading er and fr from the EISandPipette.R function
library(ggthemes)
# Function to simulate the circuit
simulate_circuit <- function(params, f) {
w <- 2 * pi * f
RsolA <- params$RsolA
RsolB <- params$RsolB
Za <- params$Ra / (1 + 1i * w * params$Ra * params$Ca)
Zb <- params$Rb / (1 + 1i * w * params$Rb * params$Cb)
Rs <- params$Rs
Zab <- Za + Zb
Zabs <- 1 / (1 / Zab + 1 / params$Rs)
Zabs_Rsol <- params$RsolA + params$RsolB + Zabs
Zr <- abs(Za * Rs + RsolA * (Rs + Za + Zb)) / abs(Zb * Rs + RsolB * (Rs + Za + Zb))
#Zr_a <- sqrt((params$Ca^2 * params$Ra^2 * params$RsolA^2 * w^2 + params$Ra^2 + 2 * params$Ra * params$RsolA + params$RsolA^2) / (params$Ca^2 * params$Ra^2 * w^2 + 1))
#Zr_b <- sqrt((params$Cb^2 * params$Rb^2 * params$RsolB^2 * w^2 + params$Rb^2 + 2 * params$Rb * params$RsolB + params$RsolB^2) / (params$Cb^2 * params$Rb^2 * w^2 + 1))
#Zr <- Zr_a / Zr_b
return(list(x=Re(Zabs_Rsol), y=Im(Zabs_Rsol), Zr=Zr))
}
# Iterate over each unique complete_ID
unique_complete_IDs <- unique(fr$complete_ID)
FIG_path <- file.path(DATA_path,"Validation Data (correct impedance ratio)")
setwd(FIG_path)
for (complete_id in unique_complete_IDs) {
# Extract corresponding circuit parameters
params <- fr[fr$complete_ID == complete_id, ]
# Extract measured data for the complete_ID
measured_data <- er %>%
filter(complete_ID %in% complete_id) %>%
melt(
id.vars = c("complete_ID","f"),
measure.vars = c("x","y","Zr","xfit_absZr","yfit_absZr","Z3fit_absZr")
) %>%
left_join(., stack(observation_labels), by = c(variable = "values")) %>%
mutate(obs = ind,ind = NULL) %>%
mutate(variable = recode(variable, xfit_absZr = "x", yfit_absZr = "y", Z3fit_absZr = "Zr")) %>%
dcast(complete_ID+f+variable~obs, value.var = "value")
# define the frequencies to measure
f <- unique(measured_data$f)
# Simulate the circuit
simulated_data <- simulate_circuit(params, f)
# Create a new dataframe that includes the simulated data
simulated_df <- data.frame(
complete_ID = complete_id,
f = f,
variable = rep(c("x", "y", "Zr"), each = length(f)),
simulated = c(simulated_data$x, simulated_data$y, simulated_data$Zr)
)
# Combine measured and simulated data
combined_data <- merge(measured_data, simulated_df, by=c("complete_ID","f","variable"))
# Create the plot
p <- ggplot(combined_data, aes(x = f)) +
geom_line(aes(y = fit), linewidth = 0.25) +
geom_line(aes(y = simulated, color = 'simulated'), linewidth = 0.75) + # Add line for simulated data
geom_point(aes(y = actual), shape = 22, fill = 'white', color = 'black', size = 2, alpha = 1) +
facet_grid(variable ~ complete_ID, scales = "free_y", labeller = labeller(variable = variable.labs, complete_ID = complete_id)) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x, n = 5), labels = trans_format("log10", math_format(10^.x))) +
scale_y_continuous(labels = comma) +
labs(
y = element_blank(),
x = "Frequency (Hz)",
color = element_blank()
) +
theme_stata(scheme = "s1color",base_size =10) +
scale_color_manual(values = c(simulated = "red")) # Define color for simulated data
file_name <- paste0("Combined data ", complete_id, ".png")
ggsave(file_name, width = figure_width_large / 2, height = figure_height_large, units = "in")
}
# Function to simulate the circuit
simulate_circuit <- function(params, f) {
w <- 2 * pi * f
RsolA <- params$RsolA
RsolB <- params$RsolB
Za <- params$Ra / (1 + 1i * w * params$Ra * params$Ca)
Zb <- params$Rb / (1 + 1i * w * params$Rb * params$Cb)
Rs <- params$Rs
Zab <- Za + Zb
Zabs <- 1 / (1 / Zab + 1 / params$Rs)
Zabs_Rsol <- params$RsolA + params$RsolB + Zabs
Va <- abs((Za * Rs + RsolA * (Rs + Za + Zb)) / (Rs + Za + Zb))
Vb <- abs((Zb * Rs + RsolB * (Rs + Za + Zb)) / (Rs + Za + Zb))
Zr <- Va / Vb
#Zr_a <- sqrt((params$Ca^2 * params$Ra^2 * params$RsolA^2 * w^2 + params$Ra^2 + 2 * params$Ra * params$RsolA + params$RsolA^2) / (params$Ca^2 * params$Ra^2 * w^2 + 1))
#Zr_b <- sqrt((params$Cb^2 * params$Rb^2 * params$RsolB^2 * w^2 + params$Rb^2 + 2 * params$Rb * params$RsolB + params$RsolB^2) / (params$Cb^2 * params$Rb^2 * w^2 + 1))
#Zr <- Zr_a / Zr_b
return(list(x=Re(Zabs_Rsol), y=Im(Zabs_Rsol), Zr=Zr))
}
# Iterate over each unique complete_ID
unique_complete_IDs <- unique(fr$complete_ID)
FIG_path <- file.path(DATA_path,"Validation Data (correct impedance ratio)")
setwd(FIG_path)
FIG_path <- file.path(DATA_path,"Validation Data (alternative)")
setwd(FIG_path)
for (complete_id in unique_complete_IDs) {
# Extract corresponding circuit parameters
params <- fr[fr$complete_ID == complete_id, ]
# Extract measured data for the complete_ID
measured_data <- er %>%
filter(complete_ID %in% complete_id) %>%
melt(
id.vars = c("complete_ID","f"),
measure.vars = c("x","y","Zr","xfit_absZr","yfit_absZr","Z3fit_absZr")
) %>%
left_join(., stack(observation_labels), by = c(variable = "values")) %>%
mutate(obs = ind,ind = NULL) %>%
mutate(variable = recode(variable, xfit_absZr = "x", yfit_absZr = "y", Z3fit_absZr = "Zr")) %>%
dcast(complete_ID+f+variable~obs, value.var = "value")
# define the frequencies to measure
f <- unique(measured_data$f)
# Simulate the circuit
simulated_data <- simulate_circuit(params, f)
# Create a new dataframe that includes the simulated data
simulated_df <- data.frame(
complete_ID = complete_id,
f = f,
variable = rep(c("x", "y", "Zr"), each = length(f)),
simulated = c(simulated_data$x, simulated_data$y, simulated_data$Zr)
)
# Combine measured and simulated data
combined_data <- merge(measured_data, simulated_df, by=c("complete_ID","f","variable"))
# Create the plot
p <- ggplot(combined_data, aes(x = f)) +
geom_line(aes(y = fit), linewidth = 0.25) +
geom_line(aes(y = simulated, color = 'simulated'), linewidth = 0.75) + # Add line for simulated data
geom_point(aes(y = actual), shape = 22, fill = 'white', color = 'black', size = 2, alpha = 1) +
facet_grid(variable ~ complete_ID, scales = "free_y", labeller = labeller(variable = variable.labs, complete_ID = complete_id)) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x, n = 5), labels = trans_format("log10", math_format(10^.x))) +
scale_y_continuous(labels = comma) +
labs(
y = element_blank(),
x = "Frequency (Hz)",
color = element_blank()
) +
theme_stata(scheme = "s1color",base_size =10) +
scale_color_manual(values = c(simulated = "red")) # Define color for simulated data
file_name <- paste0("Combined data ", complete_id, ".png")
ggsave(file_name, width = figure_width_large / 2, height = figure_height_large, units = "in")
}
# Function to simulate the circuit
simulate_circuit <- function(params, f) {
w <- 2 * pi * f
RsolA <- params$RsolA
RsolB <- params$RsolB
Za <- params$Ra / (1 + 1i * w * params$Ra * params$Ca)
Zb <- params$Rb / (1 + 1i * w * params$Rb * params$Cb)
Rs <- params$Rs
Zab <- Za + Zb
Zabs <- 1 / (1 / Zab + 1 / params$Rs)
Zabs_Rsol <- params$RsolA + params$RsolB + Zabs
Va <- mod((Za * Rs + RsolA * (Rs + Za + Zb)) / (Rs + Za + Zb))
Vb <- mod((Zb * Rs + RsolB * (Rs + Za + Zb)) / (Rs + Za + Zb))
Zr <- Va / Vb
#Zr_a <- sqrt((params$Ca^2 * params$Ra^2 * params$RsolA^2 * w^2 + params$Ra^2 + 2 * params$Ra * params$RsolA + params$RsolA^2) / (params$Ca^2 * params$Ra^2 * w^2 + 1))
#Zr_b <- sqrt((params$Cb^2 * params$Rb^2 * params$RsolB^2 * w^2 + params$Rb^2 + 2 * params$Rb * params$RsolB + params$RsolB^2) / (params$Cb^2 * params$Rb^2 * w^2 + 1))
#Zr <- Zr_a / Zr_b
return(list(x=Re(Zabs_Rsol), y=Im(Zabs_Rsol), Zr=Zr))
}
# Function to simulate the circuit
simulate_circuit <- function(params, f) {
w <- 2 * pi * f
RsolA <- params$RsolA
RsolB <- params$RsolB
Za <- params$Ra / (1 + 1i * w * params$Ra * params$Ca)
Zb <- params$Rb / (1 + 1i * w * params$Rb * params$Cb)
Rs <- params$Rs
Zab <- Za + Zb
Zabs <- 1 / (1 / Zab + 1 / params$Rs)
Zabs_Rsol <- params$RsolA + params$RsolB + Zabs
Va <- mod((Za * Rs + RsolA * (Rs + Za + Zb)) / (Rs + Za + Zb))
Vb <- mod((Zb * Rs + RsolB * (Rs + Za + Zb)) / (Rs + Za + Zb))
Zr <- Va / Vb
#Zr_a <- sqrt((params$Ca^2 * params$Ra^2 * params$RsolA^2 * w^2 + params$Ra^2 + 2 * params$Ra * params$RsolA + params$RsolA^2) / (params$Ca^2 * params$Ra^2 * w^2 + 1))
#Zr_b <- sqrt((params$Cb^2 * params$Rb^2 * params$RsolB^2 * w^2 + params$Rb^2 + 2 * params$Rb * params$RsolB + params$RsolB^2) / (params$Cb^2 * params$Rb^2 * w^2 + 1))
#Zr <- Zr_a / Zr_b
return(list(x=Re(Zabs_Rsol), y=Im(Zabs_Rsol), Zr=Zr))
}
# Iterate over each unique complete_ID
unique_complete_IDs <- unique(fr$complete_ID)
FIG_path <- file.path(DATA_path,"Validation Data (alternative)")
setwd(FIG_path)
for (complete_id in unique_complete_IDs) {
# Extract corresponding circuit parameters
params <- fr[fr$complete_ID == complete_id, ]
# Extract measured data for the complete_ID
measured_data <- er %>%
filter(complete_ID %in% complete_id) %>%
melt(
id.vars = c("complete_ID","f"),
measure.vars = c("x","y","Zr","xfit_absZr","yfit_absZr","Z3fit_absZr")
) %>%
left_join(., stack(observation_labels), by = c(variable = "values")) %>%
mutate(obs = ind,ind = NULL) %>%
mutate(variable = recode(variable, xfit_absZr = "x", yfit_absZr = "y", Z3fit_absZr = "Zr")) %>%
dcast(complete_ID+f+variable~obs, value.var = "value")
# define the frequencies to measure
f <- unique(measured_data$f)
# Simulate the circuit
simulated_data <- simulate_circuit(params, f)
# Create a new dataframe that includes the simulated data
simulated_df <- data.frame(
complete_ID = complete_id,
f = f,
variable = rep(c("x", "y", "Zr"), each = length(f)),
simulated = c(simulated_data$x, simulated_data$y, simulated_data$Zr)
)
# Combine measured and simulated data
combined_data <- merge(measured_data, simulated_df, by=c("complete_ID","f","variable"))
# Create the plot
p <- ggplot(combined_data, aes(x = f)) +
geom_line(aes(y = fit), linewidth = 0.25) +
geom_line(aes(y = simulated, color = 'simulated'), linewidth = 0.75) + # Add line for simulated data
geom_point(aes(y = actual), shape = 22, fill = 'white', color = 'black', size = 2, alpha = 1) +
facet_grid(variable ~ complete_ID, scales = "free_y", labeller = labeller(variable = variable.labs, complete_ID = complete_id)) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x, n = 5), labels = trans_format("log10", math_format(10^.x))) +
scale_y_continuous(labels = comma) +
labs(
y = element_blank(),
x = "Frequency (Hz)",
color = element_blank()
) +
theme_stata(scheme = "s1color",base_size =10) +
scale_color_manual(values = c(simulated = "red")) # Define color for simulated data
file_name <- paste0("Combined data ", complete_id, ".png")
ggsave(file_name, width = figure_width_large / 2, height = figure_height_large, units = "in")
}
test <- 2 + 1i*3
test
real(test)
Re(test)
Im(test)
abs(test)
sqrt(14)
sqrt(13)
# Function to simulate the circuit
simulate_circuit <- function(params, f) {
w <- 2 * pi * f
RsolA <- params$RsolA
RsolB <- params$RsolB
Za <- params$Ra / (1 + 1i * w * params$Ra * params$Ca)
Zb <- params$Rb / (1 + 1i * w * params$Rb * params$Cb)
Rs <- params$Rs
Zab <- Za + Zb
Zabs <- 1 / (1 / Zab + 1 / params$Rs)
Zabs_Rsol <- params$RsolA + params$RsolB + Zabs
Va <- abs((Za * Rs + RsolA * (Rs + Za + Zb)) / (Rs + Za + Zb))
Vb <- abs((Zb * Rs + RsolB * (Rs + Za + Zb)) / (Rs + Za + Zb))
Zr <- Va / Vb
#Zr_a <- sqrt((params$Ca^2 * params$Ra^2 * params$RsolA^2 * w^2 + params$Ra^2 + 2 * params$Ra * params$RsolA + params$RsolA^2) / (params$Ca^2 * params$Ra^2 * w^2 + 1))
#Zr_b <- sqrt((params$Cb^2 * params$Rb^2 * params$RsolB^2 * w^2 + params$Rb^2 + 2 * params$Rb * params$RsolB + params$RsolB^2) / (params$Cb^2 * params$Rb^2 * w^2 + 1))
#Zr <- Zr_a / Zr_b
return(list(x=Re(Zabs_Rsol), y=Im(Zabs_Rsol), Zr=Zr))
}
# Iterate over each unique complete_ID
unique_complete_IDs <- unique(fr$complete_ID)
FIG_path <- file.path(DATA_path,"Validation Data (alternative)")
setwd(FIG_path)
for (complete_id in unique_complete_IDs) {
# Extract corresponding circuit parameters
params <- fr[fr$complete_ID == complete_id, ]
# Extract measured data for the complete_ID
measured_data <- er %>%
filter(complete_ID %in% complete_id) %>%
melt(
id.vars = c("complete_ID","f"),
measure.vars = c("x","y","Zr","xfit_absZr","yfit_absZr","Z3fit_absZr")
) %>%
left_join(., stack(observation_labels), by = c(variable = "values")) %>%
mutate(obs = ind,ind = NULL) %>%
mutate(variable = recode(variable, xfit_absZr = "x", yfit_absZr = "y", Z3fit_absZr = "Zr")) %>%
dcast(complete_ID+f+variable~obs, value.var = "value")
# define the frequencies to measure
f <- unique(measured_data$f)
# Simulate the circuit
simulated_data <- simulate_circuit(params, f)
# Create a new dataframe that includes the simulated data
simulated_df <- data.frame(
complete_ID = complete_id,
f = f,
variable = rep(c("x", "y", "Zr"), each = length(f)),
simulated = c(simulated_data$x, simulated_data$y, simulated_data$Zr)
)
# Combine measured and simulated data
combined_data <- merge(measured_data, simulated_df, by=c("complete_ID","f","variable"))
# Create the plot
p <- ggplot(combined_data, aes(x = f)) +
geom_line(aes(y = fit), linewidth = 0.25) +
geom_line(aes(y = simulated, color = 'simulated'), linewidth = 0.75) + # Add line for simulated data
geom_point(aes(y = actual), shape = 22, fill = 'white', color = 'black', size = 2, alpha = 1) +
facet_grid(variable ~ complete_ID, scales = "free_y", labeller = labeller(variable = variable.labs, complete_ID = complete_id)) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x, n = 5), labels = trans_format("log10", math_format(10^.x))) +
scale_y_continuous(labels = comma) +
labs(
y = element_blank(),
x = "Frequency (Hz)",
color = element_blank()
) +
theme_stata(scheme = "s1color",base_size =10) +
scale_color_manual(values = c(simulated = "red")) # Define color for simulated data
file_name <- paste0("Combined data ", complete_id, ".png")
ggsave(file_name, width = figure_width_large / 2, height = figure_height_large, units = "in")
}
