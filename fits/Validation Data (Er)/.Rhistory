fit_error$method <- rep(method_names[[condition_name]], nrow(fit_error))
fit_error <- process_data(conditions, p)
method_names <- c(absnone = "Without pipette", absZr = "Membrane Ratio", absEr = "Electrode Ratio")
fit_error$method <- rep(method_names[[condition_name]], nrow(fit_error))
# TABLE 1 ----
# calculate the median error for the data set with and without the pipette
# grab the fit and membrane parameters from the data frame
process_data <- function(conditions, p) {
mdf_combined <- data.frame()
method_names <- c(absnone = "Without pipette", absZr = "Membrane Ratio", absEr = "Electrode Ratio")
for (condition_name in names(conditions)) {
dpg <- conditions[[condition_name]] - p
dpg_error <- dpg / p
data <- dpg_error * 100
rep_str <- setNames(
c('', 'RsolA', 'RsolB', 'Ra', 'Ca', 'Rb', 'Cb', 'Rs', 'Rapic_all', 'Rbaso_all'),
c(paste0('pg_', condition_name), '_1', '_2', '_3', '_4', '_5', '_6', '_7', '_a', '_b')
)
colnames(data) <- str_replace_all(colnames(data), rep_str)
mdf <- melt(
data,
varnames = names(dimnames(data)),
na.rm = FALSE,
as.is = FALSE,
value.name = "value"
)
mdf$method <- rep(method_names[[condition_name]], nrow(mdf))
mdf_combined <- rbind(mdf_combined, mdf)
}
return(mdf_combined)
}
# calculate the error percentages
p <- frc[grepl("p_",colnames(frc))]
conditions <- list(absnone = pg_absnone, absZr = pg_absZr, absEr = pg_absEr)
fit_error <- process_data(conditions, p)
fit_error_summary <- fit_error %>%
group_by(method,variable) %>%
summarise(n=n(),
errorMedian = median(value, na.rm = FALSE),
errorMean = mean(value, na.rm = FALSE),
errorSD = sd(value, na.rm = FALSE)
)
fit_error2 <- fit_error %>% filter(variable %in% c("RsolA", "RsolB", "Ra", "Ca", "Rb", "Cb", "Rs"))
ggplot(fit_error2, aes(x=value,fill=factor(method))) +
geom_histogram(binwidth = 10,  color = "black", alpha = 0.7) +
facet_grid(variable~.) +
xlim(-100,100) +
labs(
fill = element_blank(),
x = "Percent error (p)",
y = "Count"
) +
scale_fill_manual(values = color_vector) +
theme_Publication()
method_levels = c("Electrode ratio", "Without pipette")
fit_error2 <- fit_error %>% filter(variable %in% c("RsolA", "RsolB", "Ra", "Ca", "Rb", "Cb", "Rs")) %>%
filter(method %in% method_levels)
fit_error2 <- fit_error %>% filter(variable %in% c("RsolA", "RsolB", "Ra", "Ca", "Rb", "Cb", "Rs")) %>%
filter(method %in% method_levels)
ggplot(fit_error2, aes(x=value,fill=factor(method, levels = method_levels))) +
geom_histogram(binwidth = 10,  color = "black", alpha = 0.7) +
facet_grid(variable~.) +
xlim(-100,100) +
labs(
fill = element_blank(),
x = "Percent error (p)",
y = "Count"
) +
scale_fill_manual(values = color_vector) +
theme_Publication()
# TABLE 1 ----
# calculate the median error for the data set with and without the pipette
# grab the fit and membrane parameters from the data frame
process_data <- function(conditions, p) {
mdf_combined <- data.frame()
method_names <- c(absnone = "Without pipette", absZr = "Membrane ratio", absEr = "Electrode ratio")
for (condition_name in names(conditions)) {
dpg <- conditions[[condition_name]] - p
dpg_error <- dpg / p
data <- dpg_error * 100
rep_str <- setNames(
c('', 'RsolA', 'RsolB', 'Ra', 'Ca', 'Rb', 'Cb', 'Rs', 'Rapic_all', 'Rbaso_all'),
c(paste0('pg_', condition_name), '_1', '_2', '_3', '_4', '_5', '_6', '_7', '_a', '_b')
)
colnames(data) <- str_replace_all(colnames(data), rep_str)
mdf <- melt(
data,
varnames = names(dimnames(data)),
na.rm = FALSE,
as.is = FALSE,
value.name = "value"
)
mdf$method <- rep(method_names[[condition_name]], nrow(mdf))
mdf_combined <- rbind(mdf_combined, mdf)
}
return(mdf_combined)
}
# calculate the error percentages
p <- frc[grepl("p_",colnames(frc))]
conditions <- list(absnone = pg_absnone, absZr = pg_absZr, absEr = pg_absEr)
fit_error <- process_data(conditions, p)
fit_error_summary <- fit_error %>%
group_by(method,variable) %>%
summarise(n=n(),
errorMedian = median(value, na.rm = FALSE),
errorMean = mean(value, na.rm = FALSE),
errorSD = sd(value, na.rm = FALSE)
)
method_levels = c("Electrode ratio", "Without pipette")
fit_error2 <- fit_error %>% filter(variable %in% c("RsolA", "RsolB", "Ra", "Ca", "Rb", "Cb", "Rs")) %>%
filter(method %in% method_levels)
ggplot(fit_error2, aes(x=value,fill=factor(method, levels = method_levels))) +
geom_histogram(binwidth = 10,  color = "black", alpha = 0.7) +
facet_grid(variable~.) +
xlim(-100,100) +
labs(
fill = element_blank(),
x = "Percent error (p)",
y = "Count"
) +
scale_fill_manual(values = color_vector) +
theme_Publication()
# Filter the data that falls outside the limits
cropped_data <- fit_error2 %>%
filter(value < -100 | value > 100) %>%
group_by(method, variable) %>%
summarise(cropped_count = n())
# Print the summary table
print(cropped_data)
ggplot(fit_error2, aes(x=value,fill=factor(method, levels = method_levels))) +
geom_histogram(binwidth = 10,  color = "black", alpha = 0.7) +
facet_grid(variable~.) +
xlim(-200,200) +
labs(
fill = element_blank(),
x = "Percent error (p)",
y = "Count"
) +
scale_fill_manual(values = color_vector) +
theme_Publication()
ggplot(fit_error2, aes(x=value,fill=factor(method, levels = method_levels))) +
geom_histogram(binwidth = 10,  color = "black", alpha = 0.7) +
facet_grid(variable~.) +
xlim(-100,200) +
labs(
fill = element_blank(),
x = "Percent error (p)",
y = "Count"
) +
scale_fill_manual(values = color_vector) +
theme_Publication()
# Filter the data that falls outside the limits
cropped_data <- fit_error2 %>%
filter(value < -100 | value > 200) %>%
group_by(method, variable) %>%
summarise(cropped_count = n())
# Print the summary table
print(cropped_data)
# Filter the data that falls outside the limits
cropped_data <- fit_error2 %>%
filter(value < -100 | value > 500) %>%
group_by(method, variable) %>%
summarise(cropped_count = n())
# Print the summary table
print(cropped_data)
# Filter the data that falls outside the limits
cropped_data <- fit_error2 %>%
filter(value < -100 | value > 1000) %>%
group_by(method, variable) %>%
summarise(cropped_count = n())
# Print the summary table
print(cropped_data)
ggplot(fit_error2, aes(x=value,fill=factor(method, levels = method_levels))) +
geom_histogram(binwidth = 100,  color = "black", alpha = 0.7) +
facet_grid(variable~.) +
xlim(-100,1000) +
labs(
fill = element_blank(),
x = "Percent error (p)",
y = "Count"
) +
scale_fill_manual(values = color_vector) +
theme_Publication()
ggplot(fit_error2, aes(x=value,fill=factor(method, levels = method_levels))) +
geom_histogram(binwidth = 20,  color = "black", alpha = 0.7) +
facet_grid(variable~.) +
xlim(-100,1000) +
labs(
fill = element_blank(),
x = "Percent error (p)",
y = "Count"
) +
scale_fill_manual(values = color_vector) +
theme_Publication()
# Filter the data that falls outside the limits
cropped_data <- fit_error2 %>%
filter(value < -100 | value > 1000) %>%
group_by(method, variable) %>%
summarise(cropped_count = n())
# Print the summary table
print(cropped_data)
# Filter the data that falls outside the limits
cropped_data <- fit_error2 %>%
filter(value < -100 | value > 2500) %>%
group_by(method, variable) %>%
summarise(cropped_count = n())
# Print the summary table
print(cropped_data)
ggplot(fit_error2, aes(x=value,fill=factor(method, levels = method_levels))) +
geom_histogram(binwidth = 10,  color = "black", alpha = 0.7) +
facet_grid(variable~.) +
xlim(-100,250) +
labs(
fill = element_blank(),
x = "Percent error (p)",
y = "Count"
) +
scale_fill_manual(values = color_vector) +
theme_Publication()
ggplot(fit_error2, aes(x=log10(value),fill=factor(method, levels = method_levels))) +
geom_histogram(binwidth = 10,  color = "black", alpha = 0.7) +
facet_grid(variable~.) +
xlim(-100,250) +
labs(
fill = element_blank(),
x = "Percent error (p)",
y = "Count"
) +
scale_fill_manual(values = color_vector) +
theme_Publication()
ggplot(fit_error2, aes(x=log10(value),fill=factor(method, levels = method_levels))) +
geom_histogram(binwidth = 10,  color = "black", alpha = 0.7) +
facet_grid(variable~.) +
#xlim(-100,250) +
labs(
fill = element_blank(),
x = "Percent error (p)",
y = "Count"
) +
scale_fill_manual(values = color_vector) +
theme_Publication()
ggplot(fit_error2, aes(x=log10(value),fill=factor(method, levels = method_levels))) +
geom_histogram(binwidth = 0.2,  color = "black", alpha = 0.7) +
facet_grid(variable~.) +
#xlim(-100,250) +
labs(
fill = element_blank(),
x = "Percent error (p)",
y = "Count"
) +
scale_fill_manual(values = color_vector) +
theme_Publication()
fit_error2 <- fit_error %>% filter(variable %in% c("RsolA", "RsolB", "Ra", "Ca", "Rb", "Cb", "Rs")) %>%
filter(method %in% method_levels)
ggplot(fit_error2, aes(x=log10(value),fill=factor(method, levels = method_levels))) +
geom_histogram(binwidth = 10,  color = "black", alpha = 0.7) +
facet_grid(variable~.) +
#xlim(-100,250) +
labs(
fill = element_blank(),
x = "Percent error (p)",
y = "Count"
) +
scale_fill_manual(values = color_vector) +
theme_Publication()
ggplot(fit_error2, aes(x=log10(value),fill=factor(method, levels = method_levels))) +
geom_histogram(binwidth = 0.2,  color = "black", alpha = 0.7) +
facet_grid(variable~.) +
#xlim(-100,250) +
labs(
fill = element_blank(),
x = "Percent error (p)",
y = "Count"
) +
scale_fill_manual(values = color_vector) +
theme_Publication()
ggplot(fit_error2, aes(x=log10(value),fill=factor(method, levels = method_levels))) +
geom_histogram(binwidth = 0.5,  color = "black", alpha = 0.7) +
facet_grid(variable~.) +
#xlim(-100,250) +
labs(
fill = element_blank(),
x = "Percent error (p)",
y = "Count"
) +
scale_fill_manual(values = color_vector) +
theme_Publication()
ggplot(fit_error2, aes(x=value,fill=factor(method, levels = method_levels))) +
geom_histogram(binwidth = 10,  color = "black", alpha = 0.7) +
facet_grid(variable~.) +
xlim(-100,250) +
labs(
fill = element_blank(),
x = "Percent error (p)",
y = "Count"
) +
scale_fill_manual(values = color_vector) +
theme_Publication()
# Filter the data that falls outside the limits
cropped_data <- fit_error2 %>%
filter(value < -100 | value > 250) %>%
group_by(method, variable) %>%
summarise(cropped_count = n())
# Print the summary table
print(cropped_data)
method_levels = c("Electrode ratio", "Membrane ratio", "Without pipette")
fit_error2 <- fit_error %>% filter(variable %in% c("RsolA", "RsolB", "Ra", "Ca", "Rb", "Cb", "Rs")) %>%
filter(method %in% method_levels)
ggplot(fit_error2, aes(x=value,fill=factor(method, levels = method_levels))) +
geom_histogram(binwidth = 10,  color = "black", alpha = 0.7) +
facet_grid(variable~.) +
xlim(-100,250) +
labs(
fill = element_blank(),
x = "Percent error (p)",
y = "Count"
) +
scale_fill_manual(values = color_vector) +
theme_Publication()
# Filter the data that falls outside the limits
cropped_data <- fit_error2 %>%
filter(value < -100 | value > 250) %>%
group_by(method, variable) %>%
summarise(cropped_count = n())
# Print the summary table
print(cropped_data)
method_levels = c("Electrode ratio", "Without pipette")
fit_error2 <- fit_error %>% filter(variable %in% c("RsolA", "RsolB", "Ra", "Ca", "Rb", "Cb", "Rs")) %>%
filter(method %in% method_levels)
ggplot(fit_error2, aes(x=value,fill=factor(method, levels = method_levels))) +
geom_histogram(binwidth = 10,  color = "black", alpha = 0.7) +
facet_grid(variable~.) +
xlim(-100,250) +
labs(
fill = element_blank(),
x = "Percent error (p)",
y = "Count"
) +
scale_fill_manual(values = color_vector) +
theme_Publication()
ggplot(fit_error2, aes(x=value,fill=factor(method, levels = method_levels))) +
geom_histogram(binwidth = 10,  color = "black", alpha = 0.7) +
facet_grid(variable~.) +
xlim(-100,200) +
labs(
fill = element_blank(),
x = "Percent error (p)",
y = "Count"
) +
scale_fill_manual(values = color_vector) +
theme_Publication()
# Filter the data that falls outside the limits
cropped_data <- fit_error2 %>%
filter(value < -100 | value > 200) %>%
group_by(method, variable) %>%
summarise(cropped_count = n())
# Print the summary table
print(cropped_data)
ggplot(fit_error2, aes(x=value,fill=factor(method, levels = method_levels))) +
geom_histogram(binwidth = 10,  color = "black", alpha = 0.7) +
facet_grid(variable~.) +
xlim(-100,250) +
labs(
fill = element_blank(),
x = "Percent error (p)",
y = "Count"
) +
scale_fill_manual(values = color_vector) +
theme_Publication()
# Filter the data that falls outside the limits
cropped_data <- fit_error2 %>%
filter(value < -100 | value > 250) %>%
group_by(method, variable) %>%
summarise(cropped_count = n())
# Print the summary table
print(cropped_data)
ggplot(fit_error2, aes(x=value,fill=factor(method, levels = method_levels))) +
geom_histogram(binwidth = 10,  color = "black", alpha = 0.7) +
facet_grid(variable~.) +
xlim(-100,200) +
labs(
fill = element_blank(),
x = "Percent error (p)",
y = "Count"
) +
scale_fill_manual(values = color_vector) +
theme_Publication()
# Filter the data that falls outside the limits
cropped_data <- fit_error2 %>%
filter(value < -100 | value > 200) %>%
group_by(method, variable) %>%
summarise(cropped_count = n())
ggsave(file_name,
path = SAVE_path,
plot = last_plot(),
width = 51, height = 7.5,
units = "in",
dpi = 320,
limitsize = TRUE)
file_name <- paste0("Error histogram.png")
ggsave(file_name,
path = SAVE_path,
plot = last_plot(),
width = 5, height = 7.5,
units = "in",
dpi = 320,
limitsize = TRUE)
ggsave(file_name,
path = SAVE_path,
plot = last_plot(),
width = 4, height = 7.5,
units = "in",
dpi = 320,
limitsize = TRUE)
ggsave(file_name,
path = SAVE_path,
plot = last_plot(),
width = 3.5, height = 7.5,
units = "in",
dpi = 320,
limitsize = TRUE)
# Define a custom labeller function
custom_labeller <- function(variable) {
titles <- c(
"RsolA" = "RsolA",
"RsolB" = "RsolB",
"Ra" = "Ra",
"Ca" = "Ca",
"Rb" = "Rb",
"Cb" = "Cb",
"Rs" = "Rs"
)
return(titles[variable])
}
ggplot(fit_error2, aes(x=value, fill=factor(method, levels = method_levels))) +
geom_histogram(binwidth = 10, color = "black", alpha = 0.7) +
facet_grid(variable ~ ., labeller = as_labeller(custom_labeller)) +
xlim(-100,200) +
labs(
fill = element_blank(),
x = "Percent error (p)",
y = "Count"
) +
scale_fill_manual(values = color_vector) +
theme_Publication()
ggplot(fit_error2, aes(x=value,fill=factor(method, levels = method_levels))) +
geom_histogram(binwidth = 10,  color = "black", alpha = 0.7) +
facet_wrap(variable ~ .,
labeller = label_bquote(rows = .(variable) ~ " (" ~ alpha(.(variable)) ~ ")"),
nrow = length(unique(fit_error2$variable))) + # Set the number of rows based on the number of unique variables
xlim(-100,200) +
labs(
fill = element_blank(),
x = "Percent error (p)",
y = "Count"
) +
scale_fill_manual(values = color_vector) +
theme_Publication()
ggplot(fit_error2, aes(x=value,fill=factor(method, levels = method_levels))) +
geom_histogram(binwidth = 10,  color = "black", alpha = 0.7) +
facet_wrap(variable ~ .,
labeller = label_bquote(rows = .(variable) ~ " : " ~ .(variable)),
nrow = length(unique(fit_error2$variable))) + # Set the number of rows based on the number of unique variables
xlim(-100,200) +
labs(
fill = element_blank(),
x = "Percent error (p)",
y = "Count"
) +
scale_fill_manual(values = color_vector) +
theme_Publication()
# Define a custom labeller function
custom_labeller <- function(variable){
return(as.character(variable))
}
ggplot(fit_error2, aes(x=value,fill=factor(method, levels = method_levels))) +
geom_histogram(binwidth = 10,  color = "black", alpha = 0.7) +
facet_wrap(~ variable,
labeller = labeller(variable = custom_labeller),
nrow = length(unique(fit_error2$variable))) +
xlim(-100,200) +
labs(
fill = element_blank(),
x = "Percent error (p)",
y = "Count"
) +
scale_fill_manual(values = color_vector) +
theme_Publication()
# Filter the data that falls outside the limits
cropped_data <- fit_error2 %>%
filter(value < -100 | value > 200) %>%
group_by(method, variable) %>%
summarise(cropped_count = n())
# Print the summary table
print(cropped_data)
file_name <- paste0("Error histogram.png")
ggsave(file_name,
path = SAVE_path,
plot = last_plot(),
width = 3.5, height = 7.5,
units = "in",
dpi = 320,
limitsize = TRUE)
fit_error_summary <- fit_error %>%
group_by(method,variable) %>%
summarise(n=n(),
errorMedian = median(value, na.rm = FALSE),
errorMean = mean(value, na.rm = FALSE),
errorSD = sd(value, na.rm = FALSE)
)
fit_error_summary
View(fit_error_summary)
